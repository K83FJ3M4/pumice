use crate::{Bool32, FALSE, TRUE};

#[repr(C)]
pub(crate) struct RawPhysicalDeviceFeatures {
    pub(crate) robust_buffer_access: Bool32,
    pub(crate) full_draw_index_uint32: Bool32,
    pub(crate) image_cube_array: Bool32,
    pub(crate) independent_blend: Bool32,
    pub(crate) geometry_shader: Bool32,
    pub(crate) tessellation_shader: Bool32,
    pub(crate) sample_rate_shading: Bool32,
    pub(crate) dual_src_blend: Bool32,
    pub(crate) logic_op: Bool32,
    pub(crate) multi_draw_indirect: Bool32,
    pub(crate) draw_indirect_first_instance: Bool32,
    pub(crate) depth_clamp: Bool32,
    pub(crate) depth_bias_clamp: Bool32,
    pub(crate) fill_mode_non_solid: Bool32,
    pub(crate) depth_bounds: Bool32,
    pub(crate) wide_lines: Bool32,
    pub(crate) large_points: Bool32,
    pub(crate) alpha_to_one: Bool32,
    pub(crate) multi_viewport: Bool32,
    pub(crate) sampler_anisotropy: Bool32,
    pub(crate) texture_compression_etc2: Bool32,
    pub(crate) texture_compression_astc_ldr: Bool32,
    pub(crate) texture_compression_bc: Bool32,
    pub(crate) occlusion_query_precise: Bool32,
    pub(crate) pipeline_statistics_query: Bool32,
    pub(crate) vertex_pipeline_stores_and_atomics: Bool32,
    pub(crate) fragment_stores_and_atomics: Bool32,
    pub(crate) shader_tessellation_and_geometry_point_size: Bool32,
    pub(crate) shader_image_gather_extended: Bool32,
    pub(crate) shader_storage_image_extended_formats: Bool32,
    pub(crate) shader_storage_image_multisample: Bool32,
    pub(crate) shader_storage_image_read_without_format: Bool32,
    pub(crate) shader_storage_image_write_without_format: Bool32,
    pub(crate) shader_uniform_buffer_array_dynamic_indexing: Bool32,
    pub(crate) shader_sampled_image_array_dynamic_indexing: Bool32,
    pub(crate) shader_storage_buffer_array_dynamic_indexing: Bool32,
    pub(crate) shader_storage_image_array_dynamic_indexing: Bool32,
    pub(crate) shader_clip_distance: Bool32,
    pub(crate) shader_cull_distance: Bool32,
    pub(crate) shader_float64: Bool32,
    pub(crate) shader_int64: Bool32,
    pub(crate) shader_int16: Bool32,
    pub(crate) shader_resource_residency: Bool32,
    pub(crate) shader_resource_min_lod: Bool32,
    pub(crate) sparse_binding: Bool32,
    pub(crate) sparse_residency_buffer: Bool32,
    pub(crate) sparse_residency_image2_d: Bool32,
    pub(crate) sparse_residency_image3_d: Bool32,
    pub(crate) sparse_residency2_samples: Bool32,
    pub(crate) sparse_residency4_samples: Bool32,
    pub(crate) sparse_residency8_samples: Bool32,
    pub(crate) sparse_residency16_samples: Bool32,
    pub(crate) sparse_residency_aliased: Bool32,
    pub(crate) variable_multisample_rate: Bool32,
    pub(crate) inherited_queries: Bool32
}

#[derive(Clone, Copy)]
pub struct PhysicalDeviceFeatures {
    pub robust_buffer_access: bool,
    pub full_draw_index_uint32: bool,
    pub image_cube_array: bool,
    pub independent_blend: bool,
    pub geometry_shader: bool,
    pub tessellation_shader: bool,
    pub sample_rate_shading: bool,
    pub dual_src_blend: bool,
    pub logic_op: bool,
    pub multi_draw_indirect: bool,
    pub draw_indirect_first_instance: bool,
    pub depth_clamp: bool,
    pub depth_bias_clamp: bool,
    pub fill_mode_non_solid: bool,
    pub depth_bounds: bool,
    pub wide_lines: bool,
    pub large_points: bool,
    pub alpha_to_one: bool,
    pub multi_viewport: bool,
    pub sampler_anisotropy: bool,
    pub texture_compression_etc2: bool,
    pub texture_compression_astc_ldr: bool,
    pub texture_compression_bc: bool,
    pub occlusion_query_precise: bool,
    pub pipeline_statistics_query: bool,
    pub vertex_pipeline_stores_and_atomics: bool,
    pub fragment_stores_and_atomics: bool,
    pub shader_tessellation_and_geometry_point_size: bool,
    pub shader_image_gather_extended: bool,
    pub shader_storage_image_extended_formats: bool,
    pub shader_storage_image_multisample: bool,
    pub shader_storage_image_read_without_format: bool,
    pub shader_storage_image_write_without_format: bool,
    pub shader_uniform_buffer_array_dynamic_indexing: bool,
    pub shader_sampled_image_array_dynamic_indexing: bool,
    pub shader_storage_buffer_array_dynamic_indexing: bool,
    pub shader_storage_image_array_dynamic_indexing: bool,
    pub shader_clip_distance: bool,
    pub shader_cull_distance: bool,
    pub shader_float64: bool,
    pub shader_int64: bool,
    pub shader_int16: bool,
    pub shader_resource_residency: bool,
    pub shader_resource_min_lod: bool,
    pub sparse_binding: bool,
    pub sparse_residency_buffer: bool,
    pub sparse_residency_image2_d: bool,
    pub sparse_residency_image3_d: bool,
    pub sparse_residency2_samples: bool,
    pub sparse_residency4_samples: bool,
    pub sparse_residency8_samples: bool,
    pub sparse_residency16_samples: bool,
    pub sparse_residency_aliased: bool,
    pub variable_multisample_rate: bool,
    pub inherited_queries: bool
}

impl PhysicalDeviceFeatures {
    pub(crate) fn from_raw(raw: RawPhysicalDeviceFeatures) -> PhysicalDeviceFeatures {
        PhysicalDeviceFeatures {
            robust_buffer_access: raw.robust_buffer_access == TRUE,
            full_draw_index_uint32: raw.full_draw_index_uint32 == TRUE,
            image_cube_array: raw.image_cube_array == TRUE,
            independent_blend: raw.independent_blend == TRUE,
            geometry_shader: raw.geometry_shader == TRUE,
            tessellation_shader: raw.tessellation_shader == TRUE,
            sample_rate_shading: raw.sample_rate_shading == TRUE,
            dual_src_blend: raw.dual_src_blend == TRUE,
            logic_op: raw.logic_op == TRUE,
            multi_draw_indirect: raw.multi_draw_indirect == TRUE,
            draw_indirect_first_instance: raw.draw_indirect_first_instance == TRUE,
            depth_clamp: raw.depth_clamp == TRUE,
            depth_bias_clamp: raw.depth_bias_clamp == TRUE,
            fill_mode_non_solid: raw.fill_mode_non_solid == TRUE,
            depth_bounds: raw.depth_bounds == TRUE,
            wide_lines: raw.wide_lines == TRUE,
            large_points: raw.large_points == TRUE,
            alpha_to_one: raw.alpha_to_one == TRUE,
            multi_viewport: raw.multi_viewport == TRUE,
            sampler_anisotropy: raw.sampler_anisotropy == TRUE,
            texture_compression_etc2: raw.texture_compression_etc2 == TRUE,
            texture_compression_astc_ldr: raw.texture_compression_astc_ldr == TRUE,
            texture_compression_bc: raw.texture_compression_bc == TRUE,
            occlusion_query_precise: raw.occlusion_query_precise == TRUE,
            pipeline_statistics_query: raw.pipeline_statistics_query == TRUE,
            vertex_pipeline_stores_and_atomics: raw.vertex_pipeline_stores_and_atomics == TRUE,
            fragment_stores_and_atomics: raw.fragment_stores_and_atomics == TRUE,
            shader_tessellation_and_geometry_point_size: raw.shader_tessellation_and_geometry_point_size == TRUE,
            shader_image_gather_extended: raw.shader_image_gather_extended == TRUE,
            shader_storage_image_extended_formats: raw.shader_storage_image_extended_formats == TRUE,
            shader_storage_image_multisample: raw.shader_storage_image_multisample == TRUE,
            shader_storage_image_read_without_format: raw.shader_storage_image_read_without_format == TRUE,
            shader_storage_image_write_without_format: raw.shader_storage_image_write_without_format == TRUE,
            shader_uniform_buffer_array_dynamic_indexing: raw.shader_uniform_buffer_array_dynamic_indexing == TRUE,
            shader_sampled_image_array_dynamic_indexing: raw.shader_sampled_image_array_dynamic_indexing == TRUE,
            shader_storage_buffer_array_dynamic_indexing: raw.shader_storage_buffer_array_dynamic_indexing == TRUE,
            shader_storage_image_array_dynamic_indexing: raw.shader_storage_image_array_dynamic_indexing == TRUE,
            shader_clip_distance: raw.shader_clip_distance == TRUE,
            shader_cull_distance: raw.shader_cull_distance == TRUE,
            shader_float64: raw.shader_float64 == TRUE,
            shader_int64: raw.shader_int64 == TRUE,
            shader_int16: raw.shader_int16 == TRUE,
            shader_resource_residency: raw.shader_resource_residency == TRUE,
            shader_resource_min_lod: raw.shader_resource_min_lod == TRUE,
            sparse_binding: raw.sparse_binding == TRUE,
            sparse_residency_buffer: raw.sparse_residency_buffer == TRUE,
            sparse_residency_image2_d: raw.sparse_residency_image2_d == TRUE,
            sparse_residency_image3_d: raw.sparse_residency_image3_d == TRUE,
            sparse_residency2_samples: raw.sparse_residency2_samples == TRUE,
            sparse_residency4_samples: raw.sparse_residency4_samples == TRUE,
            sparse_residency8_samples: raw.sparse_residency8_samples == TRUE,
            sparse_residency16_samples: raw.sparse_residency16_samples == TRUE,
            sparse_residency_aliased: raw.sparse_residency_aliased == TRUE,
            variable_multisample_rate: raw.variable_multisample_rate == TRUE,
            inherited_queries: raw.inherited_queries == TRUE
        }
    }

    pub(crate) fn into_raw(&self) -> RawPhysicalDeviceFeatures {
        RawPhysicalDeviceFeatures {
            robust_buffer_access: if self.robust_buffer_access { TRUE } else { FALSE },
            full_draw_index_uint32: if self.full_draw_index_uint32 { TRUE } else { FALSE },
            image_cube_array: if self.image_cube_array { TRUE } else { FALSE },
            independent_blend: if self.independent_blend { TRUE } else { FALSE },
            geometry_shader: if self.geometry_shader { TRUE } else { FALSE },
            tessellation_shader: if self.tessellation_shader { TRUE } else { FALSE },
            sample_rate_shading: if self.sample_rate_shading { TRUE } else { FALSE },
            dual_src_blend: if self.dual_src_blend { TRUE } else { FALSE },
            logic_op: if self.logic_op { TRUE } else { FALSE },
            multi_draw_indirect: if self.multi_draw_indirect { TRUE } else { FALSE },
            draw_indirect_first_instance: if self.draw_indirect_first_instance { TRUE } else { FALSE },
            depth_clamp: if self.depth_clamp { TRUE } else { FALSE },
            depth_bias_clamp: if self.depth_bias_clamp { TRUE } else { FALSE },
            fill_mode_non_solid: if self.fill_mode_non_solid { TRUE } else { FALSE },
            depth_bounds: if self.depth_bounds { TRUE } else { FALSE },
            wide_lines: if self.wide_lines { TRUE } else { FALSE },
            large_points: if self.large_points { TRUE } else { FALSE },
            alpha_to_one: if self.alpha_to_one { TRUE } else { FALSE },
            multi_viewport: if self.multi_viewport { TRUE } else { FALSE },
            sampler_anisotropy: if self.sampler_anisotropy { TRUE } else { FALSE },
            texture_compression_etc2: if self.texture_compression_etc2 { TRUE } else { FALSE },
            texture_compression_astc_ldr: if self.texture_compression_astc_ldr { TRUE } else { FALSE },
            texture_compression_bc: if self.texture_compression_bc { TRUE } else { FALSE },
            occlusion_query_precise: if self.occlusion_query_precise { TRUE } else { FALSE },
            pipeline_statistics_query: if self.pipeline_statistics_query { TRUE } else { FALSE },
            vertex_pipeline_stores_and_atomics: if self.vertex_pipeline_stores_and_atomics { TRUE } else { FALSE },
            fragment_stores_and_atomics: if self.fragment_stores_and_atomics { TRUE } else { FALSE },
            shader_tessellation_and_geometry_point_size: if self.shader_tessellation_and_geometry_point_size { TRUE } else { FALSE },
            shader_image_gather_extended: if self.shader_image_gather_extended { TRUE } else { FALSE },
            shader_storage_image_extended_formats: if self.shader_storage_image_extended_formats { TRUE } else { FALSE },
            shader_storage_image_multisample: if self.shader_storage_image_multisample { TRUE } else { FALSE },
            shader_storage_image_read_without_format: if self.shader_storage_image_read_without_format { TRUE } else { FALSE },
            shader_storage_image_write_without_format: if self.shader_storage_image_write_without_format { TRUE } else { FALSE },
            shader_uniform_buffer_array_dynamic_indexing: if self.shader_uniform_buffer_array_dynamic_indexing { TRUE } else { FALSE },
            shader_sampled_image_array_dynamic_indexing: if self.shader_sampled_image_array_dynamic_indexing { TRUE } else { FALSE },
            shader_storage_buffer_array_dynamic_indexing: if self.shader_storage_buffer_array_dynamic_indexing { TRUE } else { FALSE },
            shader_storage_image_array_dynamic_indexing: if self.shader_storage_image_array_dynamic_indexing { TRUE } else { FALSE },
            shader_clip_distance: if self.shader_clip_distance { TRUE } else { FALSE },
            shader_cull_distance: if self.shader_cull_distance { TRUE } else { FALSE },
            shader_float64: if self.shader_float64 { TRUE } else { FALSE },
            shader_int64: if self.shader_int64 { TRUE } else { FALSE },
            shader_int16: if self.shader_int16 { TRUE } else { FALSE },
            shader_resource_residency: if self.shader_resource_residency { TRUE } else { FALSE },
            shader_resource_min_lod: if self.shader_resource_min_lod { TRUE } else { FALSE },
            sparse_binding: if self.sparse_binding { TRUE } else { FALSE },
            sparse_residency_buffer: if self.sparse_residency_buffer { TRUE } else { FALSE },
            sparse_residency_image2_d: if self.sparse_residency_image2_d { TRUE } else { FALSE },
            sparse_residency_image3_d: if self.sparse_residency_image3_d { TRUE } else { FALSE },
            sparse_residency2_samples: if self.sparse_residency2_samples { TRUE } else { FALSE },
            sparse_residency4_samples: if self.sparse_residency4_samples { TRUE } else { FALSE },
            sparse_residency8_samples: if self.sparse_residency8_samples { TRUE } else { FALSE },
            sparse_residency16_samples: if self.sparse_residency16_samples { TRUE } else { FALSE },
            sparse_residency_aliased: if self.sparse_residency_aliased { TRUE } else { FALSE },
            variable_multisample_rate: if self.variable_multisample_rate { TRUE } else { FALSE },
            inherited_queries: if self.inherited_queries { TRUE } else { FALSE }
        }
    }
}